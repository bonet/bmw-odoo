<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="view_bmw_crm_lead_form" model="ir.ui.view">
        <field name="name">crm.lead.form.inherit.bmw</field>
        <field name="model">crm.lead</field>
        <field name="inherit_id" ref="crm.crm_lead_view_form"/>
        <field name="arch" type="xml">
            <xpath expr="//group[@name='lead_priority']" position="after">
                <group>
                    <field name="id"/>
                    <button name="load_linkedin" type="object" class="btn btn-primary">Load LinkedIn</button>
                </group>
                <group></group>
                <div id="linkedinTableContainer" class="d-none">
                    <table id="linkedinTable" class="table table-bordered table-striped">
                        <thead>
                            <tr>
                                <th>Title</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                        </tbody>
                    </table>
                </div>
                <group string="LinkedIn Preview" invisible="not(linkedin_preview_full_name)">
                    <field name="linkedin_preview_title" invisible="1"/>
                    <field name="linkedin_preview_link" invisible="1"/>
                    <field name="linkedin_preview_full_name"/>
                    <field name="linkedin_preview_profile_photo_preview" widget="image"/>
                    <field name="linkedin_preview_profile_photo" widget="url" invisible="1"/>
                    <field name="linkedin_preview_headline"/>
                    <field name="linkedin_preview_about"/>
                    <field name="linkedin_preview_description1"/>
                    <field name="linkedin_preview_description1_link" widget="url"/>
                    <field name="linkedin_preview_description2"/>
                    <field name="linkedin_preview_description2_link" widget="url"/>
                    <field name="linkedin_preview_experiences" readonly="1">
                        <tree editable="false" delete="false" create="false">
                            <field name="position"/>
                            <field name="company_name"/>
                            <field name="company_url" widget="url"/>
                            <field name="location"/>
                            <field name="starts_at"/>
                            <field name="duration"/>
                        </tree>
                    </field>
                    <field name="linkedin_preview_educations" readonly="1">
                        <tree editable="false" delete="false" create="false">
                            <field name="college_name"/>
                            <field name="college_url" widget="url"/>
                            <field name="college_degree"/>
                            <field name="college_degree_field"/>
                            <field name="college_duration"/>
                        </tree>
                    </field>
                    <button name="set_as_linkedin_url" type="object" string="Populate" class="btn-primary"/>
                </group>
                <group string="Social Media">
                    <field name="linkedin_url" widget="url"/>
                </group>
                <templates>
                    <script>
                        loadLinkedinButton = document.querySelector('button[name="load_linkedin"]');

                        loadLinkedinButton.addEventListener('click', async () => {
                            <!-- Customer Name -->
                            const partnerId = document.getElementById('partner_id_1');
                            const partnerName = partnerId.value;

                            if (!partnerName) {
                                alert('Please fill in the Partner Name field first.');
                                return;
                            } 

                            try {
                                <!-- Load LinkedIn -->
                                const linkedinLoadResponse = await fetch('/crm-lead/linkedin/load', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                    body: JSON.stringify({
                                        partner_name: partnerName,
                                    })
                                })
                                .then(response => response.json());

                                const linkedinResults = linkedinLoadResponse.result;
                                const table = document.getElementById('linkedinTable');
                                const tableBody = table.querySelector('tbody');
                                tableBody.innerHTML = '';
                                <!-- Populate LinkedIn Table -->
                                linkedinResults.forEach((result, i) => {
                                    const row = document.createElement('tr');

                                    const nameCell = document.createElement('td');
                                    nameCell.textContent = result.title;
                                    row.appendChild(nameCell);

                                    const previewCell = document.createElement('td');
                                    const previewButton = document.createElement('button');
                                    previewButton.textContent = 'Preview';
                                    previewButton.className = 'btn btn-secondary';
                                    previewButton.addEventListener('click', async () => {
                                        try {
                                            const idDiv = document.querySelector('div[name="id"]');

                                            if (!idDiv) {
                                                alert('Please save the record first.');
                                                return;
                                            }

                                            <!-- Preview LinkedIn -->
                                            const linkId = result.link.split('/').pop();
                                            if (!localStorage.getItem('linkedin_preview_' + linkId)) {
                                                const linkedinPreviewResponse = await fetch('/crm-lead/linkedin/preview', {
                                                    method: 'POST',
                                                    headers: {
                                                        'Content-Type': 'application/json',
                                                    },
                                                    body: JSON.stringify({
                                                        link_id: linkId,
                                                    })
                                                })
                                                .then(response => response.json());

                                                localStorage.setItem('linkedin_preview_' + linkId, JSON.stringify(linkedinPreviewResponse.result));
                                            }

                                            <!-- Insert LinkedIn Preview -->
                                            await fetch('/crm-lead/linkedin', {
                                                method: 'POST',
                                                headers: {
                                                    'Content-Type': 'application/json',
                                                },
                                                body: JSON.stringify({
                                                    id: parseInt(idDiv.querySelector('span').textContent, 10),
                                                    title: result.title,
                                                    link: result.link,
                                                    data: JSON.parse(localStorage.getItem('linkedin_preview_' + linkId))
                                                })
                                            })
                                            .then(response => response.json());
                                        } catch (error) {
                                            alert('Error during AJAX request:', error);
                                            return;
                                        }
                                    });
                                    previewCell.appendChild(previewButton);
                                    row.appendChild(previewCell);

                                    tableBody.appendChild(row);
                                });

                                const tableContainer = document.getElementById('linkedinTableContainer');
                                tableContainer.classList.remove('d-none');
                            } catch (error) {
                                alert('Error during AJAX request:', error);
                                return;
                            }
                        });
                    </script>
                </templates>
            </xpath>
        </field>
    </record>
</odoo>
